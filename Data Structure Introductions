//something about data structures

In computer science, a data structure is a data organization, management and storage 
format that enables efficient access and modification.
More precisely, a data structure is a collection of data values, the relationships among them, 
and the functions or operations that can be applied to the data.
Data structures serve as the basis for abstract data types (ADT). 
The ADT defines the logical form of the data type. 
The data structure implements the physical form of the data type.
Different types of data structures are suited to different kinds of applications, 
and some are highly specialized to specific tasks. 
For example, relational databases commonly use B-tree indexes for data retrieval,
while compiler implementations usually use hash tables to look up identifiers.
Data structures provide a means to manage large amounts of data efficiently for uses such as 
large databases and internet indexing services. Usually, efficient data structures are key to designing efficient algorithms.
Some formal design methods and programming languages emphasize data structures, r
ather than algorithms, as the key organizing factor in software design. 
Data structures can be used to organize the storage and retrieval of information stored in both main memory and secondary memory.
Data structures are generally based on the ability of a computer to fetch and store data at any place in its memory, 
specified by a pointerâ€”a bit string, representing a memory address, that can be itself stored in memory 
and manipulated by the program. 
Thus, the array and record data structures are based on computing the addresses of data items with arithmetic operations, 
while the linked data structures are based on storing addresses of data items within the structure itself. 
Many data structures use both principles, sometimes combined in non-trivial ways (as in XOR linking).
The implementation of a data structure usually requires writing a set of procedures that create and 
manipulate instances of that structure. The efficiency of a data structure cannot be analyzed separately from those operations. 
This observation motivates the theoretical concept of an abstract data type, a data structure that is defined 
indirectly by the operations that may be performed on it, and the mathematical properties of those operations 
(including their space and time cost).
some examples of primitive data structures is: array,linkedlist,record,union, tagged union,object,graphs,trees.
/////
Data structures are used in computing to make it easy to locate and retrieve information. 
Primitive data structures are simple ways for programming languages to represent basic values. 
These include data types like integer, char (character), Boolean, pointers, and the like. 
Non-primitive data structures provide ways of storing multiple values in a single variable. 
These include arrays, lists, stacks, trees, and so forth. 
Data structures can also be used to group and organize other data structures. 
In databases, a record can be thought of as a data structure that contains all the data structures related to a given key; 
in object oriented programming languages like Java, a class is a data structure that organizes attributes and functions 
in such a way that they can be easily replicated. In each case, the way the data is "structured" makes it easy to 
retrieve or manipulate.
/////
A data structure is a specialized format for organizing and storing data. 
General data structure types include the array, the file, the record, the table, the tree, and so on. 
Any data structure is designed to organize data to suit a specific purpose so that it can be accessed and worked with in appropriate ways. 
In computer programming, a data structure may be selected or designed to store data for the purpose of working on it with various algorithms.
